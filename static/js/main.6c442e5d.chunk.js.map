{"version":3,"sources":["components/posts.js","Actions/postAction.js","Actions/actionTypes.js","components/postForm.js","reducers/postReducer.js","reducers/index.js","components/store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","console","log","this","props","fetchPosts","nextProps","newPost","posts","unshift","postDetails","map","post","react_default","a","createElement","key","title","body","Component","connect","state","items","dispstch","fetch","then","res","json","type","data","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","chnageHnadle","e","setState","defineProperty","target","name","value","onSubmitChange","preventDefault","bind","assertThisInitialized","onSubmit","onChange","postData","method","headers","content-type","JSON","stringify","intialState","item","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","App","es","className","postForm","components_posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c442e5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../Actions/postAction';\n\nclass Posts extends Component {\n\n    componentWillMount() {\n        console.log('component')\n        this.props.fetchPosts();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(nextProps) \n        if(nextProps.newPost) {\n            console.log('its new') \n                       this.props.posts.unshift(nextProps.newPost)\n        }\n    }\n  render() {\n    let postDetails = this.props.posts.map(post => (\n        <div key={post.title}>\n            <h5>{post.title}</h5>\n            <p>{post.body}</p>\n        </div>))\n    return (\n      <div>\n          <h3>Posts</h3>\n          {postDetails}\n      </div>\n    );\n  }\n}\n\nPosts.propTypes = {\n    fetchPosts: propTypes.func.isRequired,\n    posts: propTypes.array.isRequired ,\n    newPost: propTypes.object\n}\n\nconst stateToProps =  state => ({\n    posts: state.posts.items,\n    newPost: state.posts.newPost\n});\n\nexport default connect(stateToProps, { fetchPosts })(Posts);","import { FETCH_POSTS, NEW_POST } from './actionTypes';\n\nexport const fetchPosts = () => dispstch => {\n    console.log('action  fetching')\n    fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(posts => dispstch({\n            type: FETCH_POSTS,\n            data: posts\n        }));\n}\n\nexport const newPost =  postData => dispstch => {\n    console.log(postData);\n    fetch('https://jsonplaceholder.typicode.com/posts',{\n              method: 'POST',\n              headers: {\n                  'content-type': 'application/json'\n              },\n              body: JSON.stringify(postData)\n          })\n        .then(res => res.json()).then(post =>dispstch({\n            type: NEW_POST,\n            data: post\n        }));\n}","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from 'react';\nimport  { connect } from 'react-redux';\nimport { newPost }  from '../Actions/postAction';\nimport PropTypes from 'prop-types';\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: ''\n\n        }\n\n        this.chnageHnadle = this.chnageHnadle.bind(this)\n        this.onSubmitChange = this.onSubmitChange.bind(this)\n      }\n\n      chnageHnadle = (e) => {\n          this.setState({[e.target.name]: e.target.value})\n      }\n\n      onSubmitChange = (e) => {\n          e.preventDefault();\n          let post = {\n              title: this.state.title,\n              body: this.state.body\n          }\n          // action here\n          this.props.newPost(post);\n      }\n  render() {\n    return (\n      <div>\n          <h3>Add New Post</h3>\n          <form onSubmit = {this.onSubmitChange}>\n          <label>Title</label><br/>\n          <input type='text' name='title' value={this.state.title} onChange={this.chnageHnadle}/><br/>\n          <label>Description</label><br/>\n          <input type='text' name='body' value={this.state.body} onChange={this.chnageHnadle}/><br/>\n          <button type='submit'>Submit</button>\n          </form>\n      </div>\n    );\n  }\n}\n\nPostForm.propTypes = {\n    newPost: PropTypes.func.isRequired  \n}\n\n\n\nexport default connect(null, { newPost })(PostForm);","import { FETCH_POSTS, NEW_POST } from '../Actions/actionTypes';\n\nconst intialState = {\n    items: [],\n    item: {}\n}\n\nexport default (state = intialState, action) => {\n    switch(action.type) {\n        case FETCH_POSTS:\n        console.log('reduces fetch')\n            return {\n                ...state,\n                items: action.data\n            }\n        case NEW_POST:\n        console.log('reduces new')\n            return {\n                ...state,\n                item: action.data\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n    posts: postReducer\n}); ","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers'\n\nconst intialState = {};\n\nconst middleware = [thunk];\n\nconsole.log('in store ')\n\nconst store = createStore(\n    rootReducer,\n    intialState,\n    compose(\n        applyMiddleware(...middleware))\n        );\n\nexport default store;","import React, { Component } from 'react';\nimport './App.css';\nimport Posts from './components/posts';\nimport PostForm from './components/postForm';\nimport { Provider } from 'react-redux';\nimport store from './components/store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n         <div className=\"App\">\n        <PostForm />\n        <Posts />\n      </div>\n      </Provider>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}